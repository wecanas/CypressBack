import DataTable from "./data_table";
import { ICaseHookBody, ICaseHookOptions, IParameterTypeDefinition, IRunHookBody, IRunHookOptions, IStepDefinitionBody, IStepHookBody, IStepHookOptions } from "./public-member-types";
export { resolve as resolvePreprocessorConfiguration, IPreprocessorConfiguration, } from "./preprocessor-configuration";
export { addCucumberPreprocessorPlugin } from "./add-cucumber-preprocessor-plugin";
export { beforeRunHandler, afterRunHandler, beforeSpecHandler, afterSpecHandler, afterScreenshotHandler, } from "./plugin-event-handlers";
export declare function isFeature(): boolean;
export declare function doesFeatureMatch(expression: string): boolean;
export declare function defineStep<T extends unknown[], C extends Mocha.Context>(description: string | RegExp, implementation: IStepDefinitionBody<T, C>): void;
export { defineStep as Given, defineStep as When, defineStep as Then };
export declare function Step(world: Mocha.Context, text: string, argument?: DataTable | string): void;
export declare function defineParameterType<T, C extends Mocha.Context>(options: IParameterTypeDefinition<T, C>): void;
export declare function attach(data: string | ArrayBuffer, mediaType?: string): void;
export declare function Before<C extends Mocha.Context>(options: ICaseHookOptions, fn: ICaseHookBody<C>): void;
export declare function Before<C extends Mocha.Context>(fn: ICaseHookBody<C>): void;
export declare function After<C extends Mocha.Context>(options: ICaseHookOptions, fn: ICaseHookBody<C>): void;
export declare function After<C extends Mocha.Context>(fn: ICaseHookBody<C>): void;
export declare function BeforeStep<C extends Mocha.Context>(options: IStepHookOptions, fn: IStepHookBody<C>): void;
export declare function BeforeStep<C extends Mocha.Context>(fn: IStepHookBody<C>): void;
export declare function AfterStep<C extends Mocha.Context>(options: IStepHookOptions, fn: IStepHookBody<C>): void;
export declare function AfterStep<C extends Mocha.Context>(fn: IStepHookBody<C>): void;
export declare function BeforeAll<C extends Mocha.Context>(options: IRunHookOptions, fn: IRunHookBody<C>): void;
export declare function BeforeAll<C extends Mocha.Context>(fn: IRunHookBody<C>): void;
export declare function AfterAll<C extends Mocha.Context>(options: IRunHookOptions, fn: IRunHookBody<C>): void;
export declare function AfterAll<C extends Mocha.Context>(fn: IRunHookBody<C>): void;
export { default as DataTable } from "./data_table";
